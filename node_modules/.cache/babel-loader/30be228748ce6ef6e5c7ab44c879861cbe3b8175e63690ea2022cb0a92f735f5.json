{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\V\\\\Desktop\\\\react-code-empire\\\\src\\\\comps\\\\Company\\\\Numbers.js\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport { about } from \"../../data/Constants\";\n\n// Custom hook for counting numbers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useCountToNumber = (targetNumber, hasCounted, duration) => {\n  _s();\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    if (hasCounted) {\n      let start = 0;\n      const increment = targetNumber / (duration / 10);\n      const interval = setInterval(() => {\n        start += increment;\n        if (start >= targetNumber) {\n          setCount(targetNumber);\n          clearInterval(interval);\n        } else {\n          setCount(Math.ceil(start));\n        }\n      }, 10);\n      return () => clearInterval(interval);\n    }\n  }, [hasCounted, targetNumber, duration]);\n  return count;\n};\n_s(useCountToNumber, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\nconst Numbers = () => {\n  _s3();\n  var _s2 = $RefreshSig$();\n  const [hasCounted, setHasCounted] = useState(false);\n  const numbersRef = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      const [entry] = entries;\n      if (entry.isIntersecting && !hasCounted) {\n        setHasCounted(true);\n      }\n    }, {\n      threshold: 0.5\n    } // Adjust this value if needed\n    );\n    if (numbersRef.current) {\n      observer.observe(numbersRef.current);\n    }\n    return () => {\n      if (numbersRef.current) {\n        observer.unobserve(numbersRef.current);\n      }\n    };\n  }, [hasCounted]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"bg-blue-50 padding\",\n    ref: numbersRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container grid grid-cols-7 md:gap-x-5 gap-3\",\n      children: _s2(about.numbers.map(_s2((item, index) => {\n        _s2();\n        const count = useCountToNumber(item.number, hasCounted, 2000); // 2000ms for duration\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"text-blue-500 title-lg\",\n            children: [count, \" +\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"md:text-sm text-[10px] md:mt-3 mt-1\",\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), index !== about.numbers.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-[1px] bg-slate-950 h-full mx-auto bg-opacity-10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this);\n      }, \"8ivFY6TxhKI97N1ipf68Q4UuRsI=\", false, function () {\n        return [useCountToNumber];\n      })), \"8ivFY6TxhKI97N1ipf68Q4UuRsI=\", false, function () {\n        return [useCountToNumber];\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s3(Numbers, \"xkvmVC4ebk+GChspIwKk1SKT+jg=\");\n_c = Numbers;\nexport default Numbers;\nvar _c;\n$RefreshReg$(_c, \"Numbers\");","map":{"version":3,"names":["useState","useEffect","useRef","about","jsxDEV","_jsxDEV","useCountToNumber","targetNumber","hasCounted","duration","_s","count","setCount","start","increment","interval","setInterval","clearInterval","Math","ceil","Numbers","_s3","_s2","$RefreshSig$","setHasCounted","numbersRef","observer","IntersectionObserver","entries","entry","isIntersecting","threshold","current","observe","unobserve","className","ref","children","numbers","map","item","index","number","fileName","_jsxFileName","lineNumber","columnNumber","title","length","_c","$RefreshReg$"],"sources":["C:/Users/V/Desktop/react-code-empire/src/comps/Company/Numbers.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { about } from \"../../data/Constants\";\r\n\r\n// Custom hook for counting numbers\r\nconst useCountToNumber = (targetNumber, hasCounted, duration) => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (hasCounted) {\r\n      let start = 0;\r\n      const increment = targetNumber / (duration / 10);\r\n      const interval = setInterval(() => {\r\n        start += increment;\r\n        if (start >= targetNumber) {\r\n          setCount(targetNumber);\r\n          clearInterval(interval);\r\n        } else {\r\n          setCount(Math.ceil(start));\r\n        }\r\n      }, 10);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [hasCounted, targetNumber, duration]);\r\n\r\n  return count;\r\n};\r\n\r\nconst Numbers = () => {\r\n  const [hasCounted, setHasCounted] = useState(false);\r\n  const numbersRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        const [entry] = entries;\r\n        if (entry.isIntersecting && !hasCounted) {\r\n          setHasCounted(true);\r\n        }\r\n      },\r\n      { threshold: 0.5 } // Adjust this value if needed\r\n    );\r\n\r\n    if (numbersRef.current) {\r\n      observer.observe(numbersRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (numbersRef.current) {\r\n        observer.unobserve(numbersRef.current);\r\n      }\r\n    };\r\n  }, [hasCounted]);\r\n\r\n  return (\r\n    <section className=\"bg-blue-50 padding\" ref={numbersRef}>\r\n      <div className=\"container grid grid-cols-7 md:gap-x-5 gap-3\">\r\n        {about.numbers.map((item, index) => {\r\n          const count = useCountToNumber(item.number, hasCounted, 2000); // 2000ms for duration\r\n          return (\r\n            <div className=\"text-center\" key={index}>\r\n              <h6 className=\"text-blue-500 title-lg\">{count} +</h6>\r\n              <h4 className=\"md:text-sm text-[10px] md:mt-3 mt-1\">\r\n                {item.title}\r\n              </h4>\r\n              {index !== about.numbers.length - 1 && (\r\n                <div className=\"w-[1px] bg-slate-950 h-full mx-auto bg-opacity-10\" />\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Numbers;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}